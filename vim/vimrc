" vim: set foldmarker={,} foldlevel=0 foldmethod=marker spell:
" Key (re)Mappings {
  " Code folding options
  set foldlevelstart=100
  nmap <leader>f0 :set foldlevel=0<CR>
  nmap <leader>f1 :set foldlevel=1<CR>
  nmap <leader>f2 :set foldlevel=2<CR>
  nmap <leader>f3 :set foldlevel=3<CR>
  nmap <leader>f4 :set foldlevel=4<CR>
  nmap <leader>f5 :set foldlevel=5<CR>
  nmap <leader>f6 :set foldlevel=6<CR>
  nmap <leader>f7 :set foldlevel=7<CR>
  nmap <leader>f8 :set foldlevel=8<CR>
  nmap <leader>f9 :set foldlevel=9<CR>
  nmap <leader>f- :set foldlevel=100<CR>

  " nmap <C-r> :w !node<CR>

  " Find merge conflict markers
  map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>
" }

" Plugins {
  " Conquer of Completion (Coc) {
    let g:coc_global_extensions = [
      \ 'coc-tsserver'
      \ ]

    if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
      let g:coc_global_extensions += ['coc-prettier']
    endif

    if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
      let g:coc_global_extensions += ['coc-eslint']
    endif

    " Use tab for trigger completion with characters ahead and navigate.
    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
    " NOTE: There's always complete item selected by default, you may want to enable
    " no select by `"suggest.noselect": true` in your configuration file.
    " other plugin before putting this into your config.
    inoremap <silent><expr> <TAB>
          \ coc#pum#visible() ? coc#pum#next(1):
          \ CheckBackspace() ? "\<Tab>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

    " Make <CR> to accept selected completion item or notify coc.nvim to format
    " <C-g>u breaks current undo, please make your own choice.
    inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                                  \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    function! CheckBackspace() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion.
    if has('nvim')
      inoremap <silent><expr> <c-space> coc#refresh()
    else
      inoremap <silent><expr> <c-@> coc#refresh()
    endif
    " " Use tab for trigger completion with characters ahead and navigate.
    " " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
    " inoremap <silent><expr> <TAB>
    "   \ coc#pum#visible() ? coc#pum#next(1):
    "   \ <SID>check_back_space() ? "\<Tab>" :
    "   \ coc#refresh()
    " inoremap <expr> <S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
    "
    " function! s:check_back_space() abort
    "   let col = col('.') - 1
    "   return !col || getline('.')[col - 1]  =~ '\s'
    " endfunction
    "
    " " Use <c-space> to trigger completion.
    " inoremap <silent><expr> <c-space> coc#refresh()
    "
    " " Use <CR> to confirm completion
    " " inoremap <expr> <CR> coc#pum#visible() ? coc#_select_confirm() : "\<CR>"
    " inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"

    nmap <leader>gt <Plug>(coc-definition)
    nmap <silent>gt <Plug>(coc-definition)
    nmap <silent>gs :CocCommand tsserver.goToSourceDefinition<CR>
    nmap <silent>gi <Plug>(coc-implementation)
    nmap <leader>rn <Plug>(coc-rename)
    nmap <leader>ca <Plug>(coc-action)
    nmap <leader>fr <plug>(coc-references)
    nmap <leader>af <Plug>(coc-fix-current)
    nmap <leader>ac  <Plug>(coc-codeaction)
    nmap <silent> [d <Plug>(coc-diagnostic-prev)
    nmap <silent> ]d <Plug>(coc-diagnostic-next)
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    " hi CocFloating ctermbg=black ctermfg=white
  " }

  " { Copilot
    " Accept the current suggestion with <S-CR>
    imap <silent><script><expr> <S-CR> copilot#Accept("\<CR>")
    let g:copilot_no_tab_map = v:true
  " }

  " JSX {
    let g:jsx_ext_required = 0
  " }

  " NerdTree {
    let NERDTreeShowBookmarks=1
    let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$', '\.DS_Store$']
    let NERDTreeChDirMode=0
    let NERDTreeMouseMode=2
    let NERDTreeShowHidden=1
    let NERDTreeKeepTreeInNewTab=1
    let NERDTreeWinSize=60
    let g:nerdtree_tabs_open_on_gui_startup=0
  " }

  " JSON {
    nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
    let g:vim_json_syntax_conceal = 0
  " }

  " Markdown {
    let g:vim_markdown_conceal = 0
    let g:vim_markdown_conceal_code_blocks = 0
  " }

  " Ag {
    nnoremap <leader>f :Ag <c-r>=expand("<cword>")<cr>
  " }
" }
