" vim: set foldmarker={,} foldlevel=0 foldmethod=marker spell:

" Plug {
  call plug#begin()
    " General {
      Plug 'tpope/vim-sensible'
      Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
      Plug 'altercation/vim-colors-solarized'
      Plug 'myusuf3/numbers.vim'
      Plug 'w0rp/ale'
      Plug 'janko-m/vim-test'
      Plug 'airblade/vim-gitgutter'
      Plug 'tpope/vim-fugitive'
      Plug 'darfink/vim-plist', { 'for': 'plist' }
      Plug 'tomtom/tcomment_vim'
      Plug 'jlanzarotta/bufexplorer'
      Plug 'rizzatti/dash.vim'
      Plug 'christoomey/vim-tmux-navigator'
      Plug 'tpope/vim-surround'
      Plug 'rhysd/conflict-marker.vim'
      Plug 'jiangmiao/auto-pairs'
      Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
      Plug 'vim-airline/vim-airline'
      Plug 'vim-airline/vim-airline-themes'
      Plug 'bling/vim-bufferline'
      Plug 'easymotion/vim-easymotion'
      Plug 'flazz/vim-colorschemes'
      Plug 'mbbill/undotree'
      Plug 'Yggdroot/indentLine'
      Plug 'vim-scripts/restore_view.vim'
      Plug 'gcmt/wildfire.vim'
      Plug 'godlygeek/tabular'
      if executable('ctags')
        Plug 'majutsushi/tagbar'
      endif
      if (!has('nvim'))
        Plug 'matchit.zip'
      endif
    " }

    " PHP {
      Plug 'shawncplus/phpcomplete.vim'
      Plug 'arnaud-lb/vim-php-namespace'
    " }

    " Javascript {
      Plug 'elzr/vim-json'
      Plug 'pangloss/vim-javascript'
      Plug 'jelera/vim-javascript-syntax'
      Plug 'HerringtonDarkholme/yats.vim'
      " Plug 'ternjs/tern_for_vim', { 'do': 'yarn' }
      " Plug 'mxw/vim-jsx'
      Plug 'amadeus/vim-jsx'
      Plug 'othree/jspc.vim'
      Plug 'posva/vim-vue'
    " }

    " Ruby {
      Plug 'vim-ruby/vim-ruby'
      Plug 'tpope/vim-rails'
      Plug 'tpope/vim-endwise'
    " }

    " HTML {
      Plug 'alvan/vim-closetag'
    " }

    " CSS {
      Plug 'hail2u/vim-css3-syntax'
      Plug 'cakebaker/scss-syntax.vim'
    " }

    " Template highlighting {
      Plug 'slim-template/vim-slim'
    " }

    " AutoComplete {
      Plug 'neoclide/coc-json', {'do': 'yarn install --frozen-lockfile'}
      Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
      Plug 'neoclide/coc-html', {'do': 'yarn install --frozen-lockfile'}
      Plug 'neoclide/coc-solargraph', {'do': 'yarn install --frozen-lockfile'}
      Plug 'neoclide/coc.nvim', {'tag': '*', 'do': './install.sh'}
    " }

  call plug#end()
" }

" General {
  nmap <space> :
  inoremap jj <esc>
  set timeoutlen=200

  set mouse=a
  " enable pane resize with the mouse inside of tmux
  if &term =~ '^screen'
    set ttymouse=xterm2
  endif
  " set nowrap
  set relativenumber
  set colorcolumn=80
  set shortmess+=filmnrxoOtT	" Abbrev. of messages (avoids 'hit enter')
  set virtualedit=onemore 	" Allow cursor beyond last character
  set spell
  set autoread " auto read files when they change
  set hidden 			" Allow buffer switching without saving
  set iskeyword-=.                " '.' is an end of word designator
  set iskeyword-=#                " '#' is an end of word designator
  set iskeyword-=-                " '-' is an end of word designator

  if has('clipboard')
    if has('unnamedplus') " When possible use + register for copy-paste
      set clipboard=unnamed,unnamedplus
    else " On mac and Windows, use * register for copy-paste
      set clipboard=unnamed
    endif
  endif

  set viewoptions=cursor,folds,slash,unix

  " Instead of reverting the cursor to the last position in the buffer, we
  " set it to the first line when editing a git commit message
  au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

  " http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
  " Restore cursor to file position in previous editing session
  function! ResCur()
    if line("'\"") <= line("$")
      silent! normal! g`"
      return 1
    endif
  endfunction

  augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
  augroup END

  map <C-J> <C-W>j<C-W>
  map <C-K> <C-W>k<C-W>
  map <C-L> <C-W>l<C-W>
  map <C-H> <C-W>h<C-W>

  " Setting up the directories {
    set backup                  " Backups are nice ...
    if has('persistent_undo')
      set undofile                " So is persistent undo ...
      set undolevels=1000         " Maximum number of changes that can be undone
      set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
    endif
  " }

  " Run a macro on multiple visually selected lines
  " https://github.com/stoeffel/.dotfiles/blob/master/vim/visual-at.vim
  xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>
  function! ExecuteMacroOverVisualRange()
    echo "@".getcmdline()
    execute ":'<,'>normal @".nr2char(getchar())
  endfunction
" }

" Vim UI {
  let g:solarized_contrast="normal"
  let g:solarized_visibility="normal"
  colorscheme solarized
  set background=dark

  syn keyword jsCommentTodo REFACTOR
  syn keyword rubyTodo REFACTOR

  set showmode                    " Display the current mode

  set cursorline                  " Highlight current line

  highlight clear SignColumn      " SignColumn should match background
  highlight clear LineNr          " Current line number row will have same background color in relative mode
  set signcolumn=yes

  if has('cmdline_info')
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
    set showcmd                 " Show partial commands in status line and
    " Selected characters/lines in visual mode
  endif

  if has('statusline')
    " Broken down into easily includeable segments
    set statusline=%<%f\                     " Filename
    set statusline+=%w%h%m%r                 " Options
    set statusline+=%{fugitive#statusline()} " Git Hotness
    set statusline+=\ [%{&ff}/%Y]            " Filetype
    set statusline+=\ [%{getcwd()}]          " Current dir
    set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info

    set linespace=0                 " No extra spaces between rows
    set number                      " Line numbers on
    set showmatch                   " Show matching brackets/parenthesis
    set hlsearch                    " Highlight search terms
    set winminheight=0              " Windows can be 0 line high
    set ignorecase                  " Case insensitive search
    set smartcase                   " Case sensitive when uc present
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
    set scrolljump=5                " Lines to scroll when cursor leaves screen
    set foldenable                  " Auto fold code
  endif
" }

" Formatting {
  set nowrap                      " Do not wrap long lines
  set shiftwidth=2                " Use indents of 4 spaces
  set expandtab                   " Tabs are spaces, not tabs
  set tabstop=2                   " An indentation every four columns
  set softtabstop=2               " Let backspace delete indent
  set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
  set splitright                  " Puts new vsplit windows to the right of the current
  set splitbelow                  " Puts new split windows to the bottom of the current
  set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)

  autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl,sql autocmd BufWritePre <buffer> call StripTrailingWhitespace()
  autocmd FileType python setlocal shiftwidth=4 softtabstop=4
  autocmd FileType crontab setlocal nobackup nowritebackup

  au BufRead,BufNewFile *.make set ft=dosini
  au BufRead,BufNewFile *.info set ft=dosini
  au BufRead,BufNewFile *.ctp set ft=php.html
  au BufRead,BufNewFile *.twig set ft=html
  au BufRead,BufNewFile *.handlebars set ft=html
  au BufRead,BufNewFile *.pp set ft=ruby

  " http://vim.wikia.com/wiki/Fix_syntax_highlighting
  noremap <F11> <Esc>:syntax sync fromstart<CR>
  inoremap <F11> <C-o>:syntax sync fromstart<CR>
" }

" Key (re)Mappings {
  let mapleader = ','

  " Wrapped lines goes down/up to next row, rather than next line in file.
  noremap j gj
  noremap k gk

  if has("user_commands")
    command! -bang -nargs=* -complete=file E e<bang> <args>
    command! -bang -nargs=* -complete=file W w<bang> <args>
    command! -bang -nargs=* -complete=file Wq wq<bang> <args>
    command! -bang -nargs=* -complete=file WQ wq<bang> <args>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Q q<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>
  endif

  " Yank from the cursor to the end of the line, to be consistent with C and D.
  nnoremap Y y$

  " Code folding options
  set foldlevelstart=100
  nmap <leader>f0 :set foldlevel=0<CR>
  nmap <leader>f1 :set foldlevel=1<CR>
  nmap <leader>f2 :set foldlevel=2<CR>
  nmap <leader>f3 :set foldlevel=3<CR>
  nmap <leader>f4 :set foldlevel=4<CR>
  nmap <leader>f5 :set foldlevel=5<CR>
  nmap <leader>f6 :set foldlevel=6<CR>
  nmap <leader>f7 :set foldlevel=7<CR>
  nmap <leader>f8 :set foldlevel=8<CR>
  nmap <leader>f9 :set foldlevel=9<CR>
  nmap <leader>f- :set foldlevel=100<CR>

  " Find merge conflict markers
  map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

  " Shortcuts
  " Change Working Directory to that of the current file
  cmap cwd lcd %:p:h
  cmap cd. lcd %:p:h

  " Visual shifting (does not exit Visual mode)
  vnoremap < <gv
  vnoremap > >gv

  " For when you forget to sudo.. Really Write the file.
  cmap w!! w !sudo tee % >/dev/null

  " display all lines with keyword under cursor
  " and ask which one to jump to
  nmap <leader>fif [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
" }

" Plugins {
  " Matchit {
    let b:match_ignorecase = 1
  " }
  
  " Conquer of Completion (Coc) {
    " Use tab for trigger completion with characters ahead and navigate.
    " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()

    " Remap keys for gotos
    nmap <leader>gt <Plug>(coc-definition)

    " Use K to show documentation in preview window
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction
  " }

  " Ctags {
    set tags=./tags;/,~/.vimtags

    " Make tags placed in .git/tags file available in all levels of a repository
    let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
    if gitroot != ''
      let &tags = &tags . ',' . gitroot . '/.git/tags'
    endif
  " }

  " TmuxNavigate {
    let g:tmux_navigator_save_on_switch = 1
  " }

  " Tests {
    " default is: '\v(__tests__/.*|(spec|test))\.(js|jsx|coffee)$'
    " let g:test#javascript#jest#file_pattern = '.test.js'
    nmap <Leader>t :TestNearest<cr>
    nmap <Leader>T :TestFile<cr>
  " }

  " tComment {
    map <leader>c <c-_><c-_>
  " }

  " Dash {
    nmap <silent> <leader>d <Plug>DashSearch
  " }

  " JSX {
    let g:jsx_ext_required = 0
  " }

  " ALE {
    let g:airline#extensions#ale#enabled = 1
    let g:ale_fixers = {
    \   'javascript': ['prettier'],
    \   'typescript': ['prettier']
    \}
    let g:ale_fix_on_save = 1
    let g:ale_ruby_rubocop_executable = 'bundle'
  " }

  " NerdTree {
    map <C-e> :NERDTreeToggle<CR>
    map <leader>e :NERDTreeFind<CR>
    nmap <leader>nt :NERDTreeFind<CR>

    let NERDTreeShowBookmarks=1
    let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$', '\.DS_Store$']
    let NERDTreeChDirMode=0
    let NERDTreeMouseMode=2
    let NERDTreeShowHidden=1
    let NERDTreeKeepTreeInNewTab=1
    let g:nerdtree_tabs_open_on_gui_startup=0
  " }

  " Tabularize {
    nmap <Leader>a& :Tabularize /&<CR>
    vmap <Leader>a& :Tabularize /&<CR>
    nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
    vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
    nmap <Leader>a=> :Tabularize /=><CR>
    vmap <Leader>a=> :Tabularize /=><CR>
    nmap <Leader>a: :Tabularize /:<CR>
    vmap <Leader>a: :Tabularize /:<CR>
    nmap <Leader>a:: :Tabularize /:\zs<CR>
    vmap <Leader>a:: :Tabularize /:\zs<CR>
    nmap <Leader>a, :Tabularize /,<CR>
    vmap <Leader>a, :Tabularize /,<CR>
    nmap <Leader>a,, :Tabularize /,\zs<CR>
    vmap <Leader>a,, :Tabularize /,\zs<CR>
    nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
    vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
  " }

  " JSON {
    nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
    let g:vim_json_syntax_conceal = 0
  " }

  " Tern {
    " nnoremap <leader>gt :TernDef<CR>
    " let g:tern_show_argument_hints = 'on_hold'
    " let g:tern_show_signature_in_pum = 1
  " }

  " Ag {
    nnoremap <leader>f :Ag <c-r>=expand("<cword>")<cr>
  " }

  " FZF {
    nmap <silent> <c-f> :Files<cr>
    nmap <silent> <c-b> :Buffers<cr>
    nmap <silent> <c-w> :Lines<cr>
    nmap <silent> <c-s> :Ag<cr>
    autocmd VimEnter * command! -nargs=* Ag
      \ call fzf#vim#ag(<q-args>, {'options': '--bind=ctrl-s:select-all,ctrl-d:deselect-all '})
  " }

  " TagBar {
    nnoremap <silent> <leader>tt :TagbarToggle<CR>
  "}

  " Close tag {
    let g:closetag_filenames = "*.html,*.ctp,*.js,*.jsx,*.tsx"
  "}

  " Fugitive {
    nnoremap <silent> <leader>gs :Gstatus<CR>
    nnoremap <silent> <leader>gd :Gdiff<CR>
    nnoremap <silent> <leader>gc :Gcommit<CR>
    nnoremap <silent> <leader>gb :Gblame<CR>
    nnoremap <silent> <leader>gl :Glog<CR>
    nnoremap <silent> <leader>gp :Git push<CR>
    nnoremap <silent> <leader>gr :Gread<CR>
    nnoremap <silent> <leader>gw :Gwrite<CR>
    nnoremap <silent> <leader>ge :Gedit<CR>
    " Mnemonic _i_nteractive
    nnoremap <silent> <leader>gi :Git add -p %<CR>
  "}

  " Snippets {
    " remap Ultisnips for compatibility for YCM
    let g:UltiSnipsExpandTrigger = '<C-j>'
    let g:UltiSnipsJumpForwardTrigger = '<C-j>'
    let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

    " For snippet_complete marker.
    if has('conceal')
      set conceallevel=2 concealcursor=i
    endif

    " Disable the neosnippet preview candidate window
    " When enabled, there can be too much visual noise
    " especially when splits are used.
    set completeopt-=preview
  " }

  " UndoTree {
    nnoremap <Leader>u :UndotreeToggle<CR>
    " If undotree is opened, it is likely one wants to interact with it.
    let g:undotree_SetFocusWhenToggle=1
  " }

  " indent_line {
    let g:indentLine_char = '│'
  " }

  " Wildfire {
    let g:wildfire_objects = {
      \ "*" : ["i'", 'i"', "i)", "i]", "i}", "ip"],
      \ "html,xml" : ["at"],
      \ }
  " }

  " vim-airline {
    let g:airline_theme = 'solarized'
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline_extensions = ['ale', 'branch', 'ycm']
  " }

  " bufexplorer {
    let g:bufExplorerShowRelativePath=1
    let g:bufExplorerSplitOutPathName=0
  " }
" }

" Functions {
  " Initialize directories {
    function! InitializeDirectories()
      let parent = $HOME
      let prefix = 'vim'
      let dir_list = {
        \ 'backup': 'backupdir',
        \ 'views': 'viewdir',
        \ 'swap': 'directory' }

      if has('persistent_undo')
        let dir_list['undo'] = 'undodir'
      endif

      let common_dir = parent . '/.' . prefix

      for [dirname, settingname] in items(dir_list)
        let directory = common_dir . dirname . '/'

        if exists("*mkdir")
          if !isdirectory(directory)
            call mkdir(directory)
          endif
        endif

        if !isdirectory(directory)
          echo "Warning: Unable to create backup directory: " . directory
          echo "Try: mkdir -p " . directory
        else
          let directory = substitute(directory, " ", "\\\\ ", "g")
          exec "set " . settingname . "=" . directory
        endif
      endfor
    endfunction

    call InitializeDirectories()
  " }

  " Strip whitespace {
    function! StripTrailingWhitespace()
      " Preparation: save last search, and cursor position.
      let _s=@/
      let l = line(".")
      let c = col(".")
      " do the business:
      %s/\s\+$//e
      " clean up: restore previous search history, and cursor position
      let @/=_s
      call cursor(l, c)
    endfunction
  " }

  " Shell command {
    function! s:RunShellCommand(cmdline)
      botright new

      setlocal buftype=nofile
      setlocal bufhidden=delete
      setlocal nobuflisted
      setlocal noswapfile
      setlocal nowrap
      setlocal filetype=shell
      setlocal syntax=shell

      call setline(1, a:cmdline)
      call setline(2, substitute(a:cmdline, '.', '=', 'g'))
      execute 'silent $read !' . escape(a:cmdline, '%#')
      setlocal nomodifiable
      1
    endfunction

    command! -complete=file -nargs=+ Shell call s:RunShellCommand(<q-args>)
    " e.g. Grep current file for <search_term>: Shell grep -Hn <search_term> %
  " }

  " Toggle between dark and light background/colorscheme
    function! s:ToggleBackground()
      if g:colors_name == 'solarized'
        colorscheme github
        set background=light
      else
        colorscheme solarized
        set background=dark
      endif
    endfunction

    command! TB :call s:ToggleBackground()
" }
